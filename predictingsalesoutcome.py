# -*- coding: utf-8 -*-
"""PredictingSalesOutcome.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEFXULOXvrlJaplvufiqFcPi-Z15cGkW
"""

#!pip install dabl

#!pip install pandas-profiling==2.7.1

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from pandas_profiling import ProfileReport
import dabl
import missingno as msno

# import dataset
budgets_df=pd.read_csv('/Advertising Budget and Sales.csv')
budgets_df.head()

# lets delete the first column as it is extra index.
budgets_df.drop(['Unnamed: 0'],axis=1,inplace=True)

budgets_df.head()

budgets_df.shape

# lets create pandas profiling report for descriptive statistics
#report=ProfileReport(budgets_df)
#report

budgets_df.isnull().sum()

# lets perform dabl
bc=dabl.SimpleRegressor(random_state=21).fit(budgets_df,target_col='Sales ($)')
bc

# lets know the feature importance
dabl.explain(bc)
#feature_imp=dabl.explain(bc)
#feature_imp

# lets check for correlation
sns.heatmap(budgets_df.corr())

# lets define x and y
X=budgets_df.drop(['Sales ($)'],axis=1)
y=budgets_df['Sales ($)']
print(X.shape)
print(y.shape)

# lets perform train test split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=21)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# lets craete model object for linear regression
from sklearn.linear_model import LinearRegression
lr_model=LinearRegression()

# lets fit the model
lr_model.fit(X_train,y_train)

# predictions on y
y_train_pred=lr_model.predict(X_train)
y_test_pred=lr_model.predict(X_test)

# lets check RMSE value
from sklearn.metrics import mean_squared_error
print('rmse of lr_model on trainig data:',np.sqrt(mean_squared_error(y_train,y_train_pred)))
print('rmse of lr_model on testing data:',np.sqrt(mean_squared_error(y_test,y_test_pred)))

# lets check r2 score
print('R2 score:{}'.format(lr_model.score(X_test,y_test)))

pd.DataFrame({'Actual y_test': y_test , 'Predicted y_test' : y_test_pred})

# lets import the pickle library
import pickle

# lets create a file to open and write
file=open('lr_model.pkl','wb')
# dump model and close the file
pickle.dump(lr_model,file)
file.close()

# we can test the pickle file 
model = pickle.load(open('lr_model.pkl', 'rb'))

prediction=model.predict([[230.1,37.8,69.2]])

prediction[0]